// Generated by delombok at Fri Sep 06 18:27:28 EDT 2024
/*
 * Table Wrapper API
 * Copyright (C) 2020  Spacious Team <spacious-team@ya.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.spacious_team.table_wrapper.api;

/**
 * Zero-based table cell range
 */
public class TableCellRange {
    public static final TableCellRange EMPTY_RANGE = new EmptyTableCellRange();
    private final int firstRow;
    private final int lastRow;
    private final int firstColumn;
    private final int lastColumn;

    public boolean contains(TableCellAddress address) {
        return containsRow(address.getRow()) && containsColumn(address.getColumn());
    }

    public boolean containsRow(int row) {
        return firstColumn <= row && row <= lastRow;
    }

    public boolean containsColumn(int column) {
        return firstColumn <= column && column <= lastColumn;
    }

    /**
     * Adds rows without range check. First rows index of range may become negative.
     * @param number positive or negative values
     */
    public TableCellRange addRowsToTop(int number) {
        return new TableCellRange(firstRow - number, lastRow, firstColumn, lastColumn);
    }

    /**
     * @param number positive or negative values
     */
    public TableCellRange addRowsToBottom(int number) {
        return new TableCellRange(firstRow, lastRow + number, firstColumn, lastColumn);
    }

    /**
     * Adds columns without range check. First column index of range may become negative.
     * @param number positive or negative values
     */
    public TableCellRange addColumnsToLeft(int number) {
        return new TableCellRange(firstRow, lastRow, firstColumn - number, lastColumn);
    }

    /**
     * @param number positive or negative values
     */
    public TableCellRange addColumnsToRight(int number) {
        return new TableCellRange(firstRow, lastRow, firstColumn, lastColumn + number);
    }


    private static class EmptyTableCellRange extends TableCellRange {
        private EmptyTableCellRange() {
            super(0, 0, 0, 0);
        }

        @Override
        public boolean contains(TableCellAddress address) {
            return false;
        }

        @Override
        public boolean containsRow(int row) {
            return false;
        }

        @Override
        public boolean containsColumn(int column) {
            return false;
        }

        @Override
        public TableCellRange addRowsToTop(int number) {
            return this;
        }

        @Override
        public TableCellRange addRowsToBottom(int number) {
            return this;
        }

        @Override
        public TableCellRange addColumnsToLeft(int number) {
            return this;
        }

        @Override
        public TableCellRange addColumnsToRight(int number) {
            return this;
        }
    }

    @java.lang.SuppressWarnings("all")
    public int getFirstRow() {
        return this.firstRow;
    }

    @java.lang.SuppressWarnings("all")
    public int getLastRow() {
        return this.lastRow;
    }

    @java.lang.SuppressWarnings("all")
    public int getFirstColumn() {
        return this.firstColumn;
    }

    @java.lang.SuppressWarnings("all")
    public int getLastColumn() {
        return this.lastColumn;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof TableCellRange)) return false;
        final TableCellRange other = (TableCellRange) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getFirstRow() != other.getFirstRow()) return false;
        if (this.getLastRow() != other.getLastRow()) return false;
        if (this.getFirstColumn() != other.getFirstColumn()) return false;
        if (this.getLastColumn() != other.getLastColumn()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof TableCellRange;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getFirstRow();
        result = result * PRIME + this.getLastRow();
        result = result * PRIME + this.getFirstColumn();
        result = result * PRIME + this.getLastColumn();
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "TableCellRange(firstRow=" + this.getFirstRow() + ", lastRow=" + this.getLastRow() + ", firstColumn=" + this.getFirstColumn() + ", lastColumn=" + this.getLastColumn() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public TableCellRange(final int firstRow, final int lastRow, final int firstColumn, final int lastColumn) {
        this.firstRow = firstRow;
        this.lastRow = lastRow;
        this.firstColumn = firstColumn;
        this.lastColumn = lastColumn;
    }
}
